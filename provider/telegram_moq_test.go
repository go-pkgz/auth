// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package provider

import (
	"context"
	"sync"
)

// Ensure, that TelegramAPIMock does implement TelegramAPI.
// If this is not the case, regenerate this file with moq.
var _ TelegramAPI = &TelegramAPIMock{}

// TelegramAPIMock is a mock implementation of TelegramAPI.
//
//	func TestSomethingThatUsesTelegramAPI(t *testing.T) {
//
//		// make and configure a mocked TelegramAPI
//		mockedTelegramAPI := &TelegramAPIMock{
//			AvatarFunc: func(ctx context.Context, userID int) (string, error) {
//				panic("mock out the Avatar method")
//			},
//			BotInfoFunc: func(ctx context.Context) (*botInfo, error) {
//				panic("mock out the BotInfo method")
//			},
//			GetUpdatesFunc: func(ctx context.Context) (*telegramUpdate, error) {
//				panic("mock out the GetUpdates method")
//			},
//			SendFunc: func(ctx context.Context, id int, text string) error {
//				panic("mock out the Send method")
//			},
//		}
//
//		// use mockedTelegramAPI in code that requires TelegramAPI
//		// and then make assertions.
//
//	}
type TelegramAPIMock struct {
	// AvatarFunc mocks the Avatar method.
	AvatarFunc func(ctx context.Context, userID int) (string, error)

	// BotInfoFunc mocks the BotInfo method.
	BotInfoFunc func(ctx context.Context) (*botInfo, error)

	// GetUpdatesFunc mocks the GetUpdates method.
	GetUpdatesFunc func(ctx context.Context) (*telegramUpdate, error)

	// SendFunc mocks the Send method.
	SendFunc func(ctx context.Context, id int, text string) error

	// calls tracks calls to the methods.
	calls struct {
		// Avatar holds details about calls to the Avatar method.
		Avatar []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserID is the userID argument value.
			UserID int
		}
		// BotInfo holds details about calls to the BotInfo method.
		BotInfo []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetUpdates holds details about calls to the GetUpdates method.
		GetUpdates []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Send holds details about calls to the Send method.
		Send []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int
			// Text is the text argument value.
			Text string
		}
	}
	lockAvatar     sync.RWMutex
	lockBotInfo    sync.RWMutex
	lockGetUpdates sync.RWMutex
	lockSend       sync.RWMutex
}

// Avatar calls AvatarFunc.
func (mock *TelegramAPIMock) Avatar(ctx context.Context, userID int) (string, error) {
	if mock.AvatarFunc == nil {
		panic("TelegramAPIMock.AvatarFunc: method is nil but TelegramAPI.Avatar was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		UserID int
	}{
		Ctx:    ctx,
		UserID: userID,
	}
	mock.lockAvatar.Lock()
	mock.calls.Avatar = append(mock.calls.Avatar, callInfo)
	mock.lockAvatar.Unlock()
	return mock.AvatarFunc(ctx, userID)
}

// AvatarCalls gets all the calls that were made to Avatar.
// Check the length with:
//
//	len(mockedTelegramAPI.AvatarCalls())
func (mock *TelegramAPIMock) AvatarCalls() []struct {
	Ctx    context.Context
	UserID int
} {
	var calls []struct {
		Ctx    context.Context
		UserID int
	}
	mock.lockAvatar.RLock()
	calls = mock.calls.Avatar
	mock.lockAvatar.RUnlock()
	return calls
}

// BotInfo calls BotInfoFunc.
func (mock *TelegramAPIMock) BotInfo(ctx context.Context) (*botInfo, error) {
	if mock.BotInfoFunc == nil {
		panic("TelegramAPIMock.BotInfoFunc: method is nil but TelegramAPI.BotInfo was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockBotInfo.Lock()
	mock.calls.BotInfo = append(mock.calls.BotInfo, callInfo)
	mock.lockBotInfo.Unlock()
	return mock.BotInfoFunc(ctx)
}

// BotInfoCalls gets all the calls that were made to BotInfo.
// Check the length with:
//
//	len(mockedTelegramAPI.BotInfoCalls())
func (mock *TelegramAPIMock) BotInfoCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockBotInfo.RLock()
	calls = mock.calls.BotInfo
	mock.lockBotInfo.RUnlock()
	return calls
}

// GetUpdates calls GetUpdatesFunc.
func (mock *TelegramAPIMock) GetUpdates(ctx context.Context) (*telegramUpdate, error) {
	if mock.GetUpdatesFunc == nil {
		panic("TelegramAPIMock.GetUpdatesFunc: method is nil but TelegramAPI.GetUpdates was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetUpdates.Lock()
	mock.calls.GetUpdates = append(mock.calls.GetUpdates, callInfo)
	mock.lockGetUpdates.Unlock()
	return mock.GetUpdatesFunc(ctx)
}

// GetUpdatesCalls gets all the calls that were made to GetUpdates.
// Check the length with:
//
//	len(mockedTelegramAPI.GetUpdatesCalls())
func (mock *TelegramAPIMock) GetUpdatesCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetUpdates.RLock()
	calls = mock.calls.GetUpdates
	mock.lockGetUpdates.RUnlock()
	return calls
}

// Send calls SendFunc.
func (mock *TelegramAPIMock) Send(ctx context.Context, id int, text string) error {
	if mock.SendFunc == nil {
		panic("TelegramAPIMock.SendFunc: method is nil but TelegramAPI.Send was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		ID   int
		Text string
	}{
		Ctx:  ctx,
		ID:   id,
		Text: text,
	}
	mock.lockSend.Lock()
	mock.calls.Send = append(mock.calls.Send, callInfo)
	mock.lockSend.Unlock()
	return mock.SendFunc(ctx, id, text)
}

// SendCalls gets all the calls that were made to Send.
// Check the length with:
//
//	len(mockedTelegramAPI.SendCalls())
func (mock *TelegramAPIMock) SendCalls() []struct {
	Ctx  context.Context
	ID   int
	Text string
} {
	var calls []struct {
		Ctx  context.Context
		ID   int
		Text string
	}
	mock.lockSend.RLock()
	calls = mock.calls.Send
	mock.lockSend.RUnlock()
	return calls
}
